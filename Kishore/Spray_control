#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>
#include <addons/TokenHelper.h>
#include <addons/RTDBHelper.h>

#define WIFI_SSID "spherenex1"
#define WIFI_PASSWORD "Spherenex@789"

#define API_KEY "AIzaSyB9ererNsNonAzH0zQo_GS79XPOyCoMxr4"
#define DATABASE_URL "https://waterdtection-default-rtdb.firebaseio.com/"

#define USER_EMAIL "spherenexgpt@gmail.com"
#define USER_PASSWORD "Spherenex@123"

// Firebase path for control value
#define FIREBASE_PATH "Plant_Detection2/Spray"

FirebaseData fbdo;
FirebaseData streamData;
FirebaseAuth auth;
FirebaseConfig config;

// Define relay pins
const int relay1Pin = D1;  // Connect to relay 1
const int relay2Pin = D2;  // Connect to relay 2
const int relay3Pin = D3;  // Connect to relay 3

// Active LOW relays (HIGH = OFF, LOW = ON)
const int RELAY_ON = LOW;
const int RELAY_OFF = HIGH;

unsigned long lastUpdateTime = 0;
const unsigned long UPDATE_INTERVAL = 2000;  // Check every 2 seconds if not using stream

// Callback function for Firebase stream
void streamCallback(StreamData data)
{
  // Print out the path that changed
  Serial.print("Stream Path: ");
  Serial.println(data.dataPath());

  // If the data we want changed
  if (data.dataPath() == "/")
  {
    String control = data.stringData();
    Serial.print("Received control value: ");
    Serial.println(control);
    
    updateRelays(control);
  }
}

// Timeout callback for Firebase stream
void streamTimeoutCallback(bool timeout)
{
  if (timeout)
  {
    Serial.println("Stream timeout, resuming...");
  }
  
  if (!Firebase.readStream(streamData))
  {
    Serial.println("Stream read error, reason: " + streamData.errorReason());
  }
}

void updateRelays(String control)
{
  if (control == "0")
  {
    // All relays ON
    digitalWrite(relay1Pin, RELAY_OFF);
    digitalWrite(relay2Pin, RELAY_OFF);
    digitalWrite(relay3Pin, RELAY_OFF);
    Serial.println("All sprayers ON");
  }
  else if (control == "1")
  {
    // Only relay 1 OFF, others ON
    digitalWrite(relay1Pin, RELAY_ON);
    digitalWrite(relay2Pin, RELAY_OFF);
    digitalWrite(relay3Pin, RELAY_OFF);
    Serial.println("Sprayer 1 OFF, others ON");
  }
  else if (control == "2")
  {
    // Only relay 2 OFF, others ON
    digitalWrite(relay1Pin, RELAY_OFF);
    digitalWrite(relay2Pin, RELAY_ON);
    digitalWrite(relay3Pin, RELAY_OFF);
    Serial.println("Sprayer 2 OFF, others ON");
  }
  else if (control == "3")
  {
    // Only relay 3 OFF, others ON
    digitalWrite(relay1Pin, RELAY_OFF);
    digitalWrite(relay2Pin, RELAY_OFF);
    digitalWrite(relay3Pin, RELAY_ON);
    Serial.println("Sprayer 3 OFF, others ON");
  }
  else if (control == "4")
  {
    // All relays OFF
    digitalWrite(relay1Pin, RELAY_OFF);
    digitalWrite(relay2Pin, RELAY_OFF);
    digitalWrite(relay3Pin, RELAY_OFF);
    Serial.println("All sprayers OFF");
  }
}

void setup() {
  // Initialize relay pins as outputs
  pinMode(relay1Pin, OUTPUT);
  pinMode(relay2Pin, OUTPUT);
  pinMode(relay3Pin, OUTPUT);

  // Set all relays to OFF initially
  digitalWrite(relay1Pin, RELAY_OFF);
  digitalWrite(relay2Pin, RELAY_OFF);
  digitalWrite(relay3Pin, RELAY_OFF);

  Serial.begin(9600);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println("\nConnected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;
  config.token_status_callback = tokenStatusCallback;

  Firebase.reconnectNetwork(true);
  Firebase.begin(&config, &auth);
  
  Serial.println("Authenticating...");
  while (!Firebase.ready()) 
  {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("\nAuthenticated!");

  // Initialize spray control to OFF
  if (Firebase.setString(fbdo, FIREBASE_PATH, "0")) {
    Serial.println("Initial spray state set to OFF");
  } else {
    Serial.println("Failed to set initial state, reason: " + fbdo.errorReason());
  }
  
  // Set up the stream
  if (!Firebase.beginStream(streamData, FIREBASE_PATH)) {
    Serial.println("Could not begin stream");
    Serial.println("REASON: " + streamData.errorReason());
  } else {
    Serial.println("Stream began successfully");
    Firebase.setStreamCallback(streamData, streamCallback, streamTimeoutCallback);
  }
}

void loop()
{
  // If not using stream, uncomment this section and comment out stream setup in setup()
  /*
  if (millis() - lastUpdateTime > UPDATE_INTERVAL) {
    lastUpdateTime = millis();
    
    if (Firebase.getString(fbdo, FIREBASE_PATH)) {
      String control = fbdo.stringData();
      Serial.print("Received control value: ");
      Serial.println(control);
      
      updateRelays(control);
    } else {
      Serial.println("Failed to get data, reason: " + fbdo.errorReason());
    }
  }
  */
  
  // Process any Firebase events
  if (Firebase.ready()) {
    Firebase.readStream(streamData);
  }
}
