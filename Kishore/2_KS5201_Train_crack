#include <ESP8266WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

// ===== WiFi credentials =====
#define WIFI_SSID "train"
#define WIFI_PASSWORD "123456789"

// ===== Firebase credentials =====
#define API_KEY "AIzaSyBi4imuMT5imCT-8IBULdyFqj-ZZtl68Do"
#define DATABASE_URL "https://regal-welder-453313-d6-default-rtdb.firebaseio.com/"

// ===== Email/Password Authentication (Firebase user, not Gmail!) =====
#define USER_EMAIL "spherenexgpt@gmail.com"
#define USER_PASSWORD "Spherenex@123"

// Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Motor pins (L298N)
const int motorPin1 = D1; 
const int motorPin2 = D2; 
const int ENA = D3;        // PWM pin

// Ultrasonic pins
const int trigPin = D5;
const int echoPin = D6;

// Distance threshold
const int stopDistance = 15;  

// Motor speed (PWM: 0â€“1023 on ESP8266)
int motorSpeed = 80;  // ðŸ‘ˆ slow speed (you can increase for faster)

// Track WiFi
bool wifiConnected = false;

void setup() {
  Serial.begin(115200);

  // Motor setup
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(ENA, OUTPUT);

  // Ultrasonic setup
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // ===== WiFi setup =====
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nâœ… WiFi connected");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
  wifiConnected = true;

  // ===== Firebase setup =====
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  Serial.println("System Ready...");
}

// Measure distance using ultrasonic
long measureDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 20000);
  return duration * 0.034 / 2;
}

// Motor forward with PWM
void moveForward(int speed) {
  digitalWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, LOW);
  analogWrite(ENA, speed);   // PWM duty cycle
}

// Motor stop
void stopMotor() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  analogWrite(ENA, 0);
}

void loop() {
  long distance = measureDistance();
  String motorCmd;
  int obstacleFlag;

  if (distance <= stopDistance) {
    stopMotor();
    motorCmd = "S";
    obstacleFlag = 1;
  } else {
    moveForward(motorSpeed);   // ðŸ‘ˆ run at slow PWM speed
    motorCmd = "F";
    obstacleFlag = 0;
  }

  // Print to Serial
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm â†’ MotorCmd: ");
  Serial.print(motorCmd);
  Serial.print(" | Obstacle: ");
  Serial.println(obstacleFlag);

  // Push to Firebase
  if (wifiConnected && Firebase.ready()) {
    Firebase.RTDB.setString(&fbdo, "/1_KS5210_Train/motor_cmd", motorCmd);
    Firebase.RTDB.setInt(&fbdo, "/1_KS5210_Train/obstacle", obstacleFlag);
    Firebase.RTDB.setInt(&fbdo, "/1_KS5210_Train/distance", distance);
  }

  delay(800);
}
