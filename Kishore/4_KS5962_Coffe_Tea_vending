#include <ESP8266WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// ===== WiFi credentials =====
#define WIFI_SSID "coffee"
#define WIFI_PASSWORD "123456789"

// ===== Firebase credentials =====
#define API_KEY "AIzaSyBi4imuMT5imCT-8IBULdyFqj-ZZtl68Do"
#define DATABASE_URL "https://regal-welder-453313-d6-default-rtdb.firebaseio.com/"
#define USER_EMAIL "spherenexgpt@gmail.com"
#define USER_PASSWORD "Spherenex@123"

// Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Firebase root node
const String FB_ROOT = "/3_KS5962_coffe_tea_vending";

// OLED Setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// IR Cup Sensor
#define IR_PIN D2

// Relay Pins
#define RELAY_COFFEE D1
#define RELAY_TEA D8

// MUX Pins
#define MUX_S0 D5
#define MUX_S1 D6
#define MUX_S2 D7
#define MUX_S3 D0
#define MUX_SIG A0

float coffeeMin = 0.2, coffeeMax = 2.8;
float teaMin    = 0.2, teaMax    = 2.8;

const float ADC_MAX_VOLTAGE = 3.3;
const int ADC_RESOLUTION = 1023;

bool wifiConnected = false;
String drinkRequest = "NONE";

void muxSelect(uint8_t ch) {
  digitalWrite(MUX_S0, (ch & 0x01) ? HIGH : LOW);
  digitalWrite(MUX_S1, (ch & 0x02) ? HIGH : LOW);
  digitalWrite(MUX_S2, (ch & 0x04) ? HIGH : LOW);
  digitalWrite(MUX_S3, (ch & 0x08) ? HIGH : LOW);
  delayMicroseconds(50);
}

float readMuxChannelVoltage(uint8_t ch) {
  muxSelect(ch);
  int raw = analogRead(MUX_SIG);
  float voltage = (raw * ADC_MAX_VOLTAGE) / ADC_RESOLUTION;
  return voltage;
}

float voltageToPercent(float v, float vmin, float vmax) {
  if (v <= vmin) return 0.0;
  if (v >= vmax) return 100.0;
  return (v - vmin) * 100.0 / (vmax - vmin);
}

String fbPath(const String &child) {
  return FB_ROOT + "/" + child;
}

void setup() {
  Serial.begin(115200);
  Serial.println("\nBooting Coffee/Tea Machine...");

  pinMode(IR_PIN, INPUT);
  pinMode(RELAY_COFFEE, OUTPUT);
  pinMode(RELAY_TEA, OUTPUT);
  digitalWrite(RELAY_COFFEE, HIGH);
  digitalWrite(RELAY_TEA, HIGH);

  pinMode(MUX_S0, OUTPUT);
  pinMode(MUX_S1, OUTPUT);
  pinMode(MUX_S2, OUTPUT);
  pinMode(MUX_S3, OUTPUT);

  Wire.begin(D3, D4); // SDA, SCL
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("❌ OLED allocation failed");
    for (;;);
  }/
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Coffee/Tea Machine");
  display.display();
  delay(1000);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected");
  Serial.print("IP: "); Serial.println(WiFi.localIP());
  wifiConnected = true;

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  if (Firebase.ready()) {
    Firebase.RTDB.setString(&fbdo, fbPath("DrinkRequest").c_str(), "NONE");
    Firebase.RTDB.setInt(&fbdo, fbPath("CoffeeLevel").c_str(), 100);
    Firebase.RTDB.setInt(&fbdo, fbPath("TeaLevel").c_str(), 100);
    Firebase.RTDB.setString(&fbdo, fbPath("Status").c_str(), "Idle");
    Serial.println("✅ Firebase initialized under " + FB_ROOT);
  }
}

void loop() {
  bool cupPresent = (digitalRead(IR_PIN) == LOW);

  float vCoffee = readMuxChannelVoltage(0);
  float vTea = readMuxChannelVoltage(1);
  float pCoffee = voltageToPercent(vCoffee, coffeeMin, coffeeMax);
  float pTea = voltageToPercent(vTea, teaMin, teaMax);

  if (Firebase.ready()) {
    if (Firebase.RTDB.getString(&fbdo, fbPath("DrinkRequest").c_str())) {
      drinkRequest = fbdo.stringData();
    }
  }

  String msg = "Idle";
  if (cupPresent) {
    if (drinkRequest == "COFFEE") {
      if (pCoffee > 30) {
        digitalWrite(RELAY_COFFEE, LOW);
        delay(3000);
        digitalWrite(RELAY_COFFEE, HIGH);
        msg = "Coffee Dispensed";
      } else {
        msg = "Coffee LOW";
      }
      if (Firebase.ready()) Firebase.RTDB.setString(&fbdo, fbPath("DrinkRequest").c_str(), "NONE");
      drinkRequest = "NONE";
    } else if (drinkRequest == "TEA") {
      if (pTea > 30) {
        digitalWrite(RELAY_TEA, LOW);
        delay(3000);
        digitalWrite(RELAY_TEA, HIGH);
        msg = "Tea Dispensed";
      } else {
        msg = "Tea LOW";
      }
      if (Firebase.ready()) Firebase.RTDB.setString(&fbdo, fbPath("DrinkRequest").c_str(), "NONE");
      drinkRequest = "NONE";
    } else {
      msg = "Waiting Order";
    }
  } else {
    msg = "Place Cup";
  }

  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Coffee: "); display.print((int)pCoffee); display.println("%");
  display.print("Tea   : "); display.print((int)pTea); display.println("%");
  display.print("Cup: "); display.println(cupPresent ? "Yes" : "No");
  display.println(msg);
  display.display();

  if (Firebase.ready()) {
    Firebase.RTDB.setInt(&fbdo, fbPath("CoffeeLevel").c_str(), (int)pCoffee);
    Firebase.RTDB.setInt(&fbdo, fbPath("TeaLevel").c_str(), (int)pTea);
    Firebase.RTDB.setString(&fbdo, fbPath("Status").c_str(), msg);
  }

  Serial.println("Status Update:");
  Serial.print("Coffee: "); Serial.print((int)pCoffee); Serial.print("% | ");
  Serial.print("Tea: "); Serial.print((int)pTea); Serial.print("% | ");
  Serial.print("Cup: "); Serial.print(cupPresent ? "Yes" : "No"); Serial.print(" | ");
  Serial.print("Request: "); Serial.print(drinkRequest); Serial.print(" | ");
  Serial.println(msg);

  delay(2000);
}
