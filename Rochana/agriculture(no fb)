//soil+ph sensor
const int S0_PIN = D4; // GPIO2
const int S1_PIN = D3; // GPIO0
const int S2_PIN = D2; // GPIO4
const int ANALOG_PIN = A0;

// Define the sensor channels on the multiplexer
const int PH_SENSOR_CHANNEL = 0; // Connected to Y0
const int SOIL_MOISTURE_CHANNEL = 1; // Connected to Y1

// pH sensor calibration values (adjust these after calibration)
float pH_calibration_value = 21.34;
float pH7_voltage = 1.5; // Example voltage at pH 7

void setup() {
  Serial.begin(115200);

  // Set the multiplexer control pins as outputs
  pinMode(S0_PIN, OUTPUT);
  pinMode(S1_PIN, OUTPUT);
  pinMode(S2_PIN, OUTPUT);
}

void loop() {
  // Read pH sensor value
  float phValue = readSensor(PH_SENSOR_CHANNEL);
  float voltage = phValue * (3.3 / 1024.0); // Convert to voltage
  float pH = -5.70 * voltage + pH_calibration_value; // pH formula from DFRobot documentation
  Serial.print("pH Value: ");
  Serial.println(pH, 2);

  // Read soil moisture sensor value
  int moistureValue = readSensor(SOIL_MOISTURE_CHANNEL);
  int moisturePercentage = map(moistureValue, 0, 1023, 100, 0); // Calibrate for your sensor
  Serial.print("Soil Moisture: ");
  Serial.print(moisturePercentage);
  Serial.println("%");

  Serial.println();
  delay(5000); // Read sensors every 5 seconds
}

// Function to read a specific sensor channel from the multiplexer
int readSensor(int channel) {
  // Select the channel using the select pins
  digitalWrite(S0_PIN, bitRead(channel, 0));
  digitalWrite(S1_PIN, bitRead(channel, 1));
  digitalWrite(S2_PIN, bitRead(channel, 2));

  delay(10); // Give the multiplexer time to switch

  // Read the analog value
  int sensorValue = analogRead(ANALOG_PIN);

  return sensorValue;
}*/
const int soilSensorPin = A0; // The ESP8266's analog input pin

void setup() {
  Serial.begin(115200);
}

void loop() {
  int rawValue = analogRead(soilSensorPin);
  Serial.print("Raw Sensor Value: ");
  Serial.println(rawValue);
  delay(1000); // Read the sensor every second
}

/*
#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>
#include <addons/TokenHelper.h>
#include <addons/RTDBHelper.h>
// ---------- Wi-Fi ----------
#define WIFI_SSID      "animal"
#define WIFI_PASSWORD  "123456789"
// ---------- Firebase ----------
#define API_KEY         "AIzaSyCM0tItu-glPhEllQZPz8h6_5ZsHTBiaMw"
#define DATABASE_URL    "https://intel-gesture-default-rtdb.firebaseio.com"
#define USER_EMAIL      "spherenexgpt@gmail.com"
#define USER_PASSWORD   "Spherenex@123"

// ---------- Firebase path ----------
#define FB_PATH "Plant_Detection3/HUMAN"

// ---------- Buzzer ----------
#define BUZZER_PIN D5   // choose your pin (e.g. D5=GPIO14)
#define BEEP_MS    200  // beep duration

FirebaseData fbdo;
FirebaseData stream;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long buzzerOffTime = 0;

void streamCallback(StreamData data) {
  if (data.dataPath() == "/") {
    String val = data.stringData();
    Serial.printf("[Firebase] HUMAN changed: %s\n", val.c_str());
    if (val == "1") {
      digitalWrite(BUZZER_PIN, HIGH);
      buzzerOffTime = millis() + BEEP_MS;
    }
  }
}

void streamTimeoutCallback(bool timeout) {
  if (timeout) {
    Serial.println("Stream timeout, reconnecting...");
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println("\nWiFi connected!");

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.token_status_callback = tokenStatusCallback;

  Firebase.reconnectNetwork(true);
  Firebase.begin(&config, &auth);

  Serial.println("Connecting to Firebase...");
  while (!Firebase.ready()) {
    delay(100);
    Serial.print(".");
  }
  Serial.println("\nFirebase ready!");
  // Begin stream on HUMAN path
  if (Firebase.beginStream(stream, FB_PATH)) {
    Firebase.setStreamCallback(stream, streamCallback, streamTimeoutCallback);
    Serial.println("Stream started!");
  } else {
    Serial.printf("Stream failed: %s\n", stream.errorReason().c_str());
  }
}
void loop() {
  // keep stream alive
  if (Firebase.ready()) {
    Firebase.readStream(stream);
  }

  // stop buzzer after duration
  if (buzzerOffTime && millis() > buzzerOffTime) {
    digitalWrite(BUZZER_PIN, LOW);
    buzzerOffTime = 0;
  }
}





*/


